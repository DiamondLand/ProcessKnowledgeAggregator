from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from decorators.profile_decorator import check_authorized
from decorators.admin_access_decorator import check_admin_access

from handlers.topics.questions.create_question import create_question_handler
from handlers.games.crossword import show_crossword

from elements.inline.inline_admin import admins_btns
from elements.keyboards.keyboards_profile import profile_kb

router = Router()


# --- –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("start", "profile"))
@check_authorized
async def cmd_start(message: Message, state: FSMContext, get_user_response: dict):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await message.answer(
        text=f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–æ–π {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if get_user_response['user_privileges']['is_admin'] else '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'} ‚ú®!</b>\
            \n–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç <code>{get_user_response['user_info']['login']}</code>!\
            \n\n–í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: <code>{get_user_response['user_statistic']['questions']}</code> | –í–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: <code>{get_user_response['user_statistic']['answers']}</code>\
            \n–í–∞—à–∏—Ö –ø–æ–∏–Ω—Ç–æ–≤: <code>{get_user_response['user_statistic']['points']}</code>",
        reply_markup=profile_kb())


@router.message(Command("game"))
@check_authorized
async def cmd_game(message: Message, state: FSMContext, __get_user_response: dict):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await message.answer("–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø–æ —Ç–µ–º–µ <code>–º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏—è</code>. –í–æ—Ç –∫–∞—Ä—Ç–∞ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞:")
    await show_crossword(message=message, state=state)


# --- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å --- #
@router.message(Command("question"))
@check_authorized
async def cmd_question(message: Message, state: FSMContext, __get_user_response: dict):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await create_question_handler(message=message, state=state)


# --- –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("admin"))
@check_admin_access
async def cmd_admin(message: Message, state: FSMContext, __get_user_response: dict):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await message.answer(
        text="üïê –°–µ–∫—É–Ω–¥–æ—á–∫—É...",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        text="–í—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=admins_btns().as_markup()
    )
