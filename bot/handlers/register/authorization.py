import httpx
import re

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from functions.inline_remove import remove_button
from functions.account.account_responses import check_account
from functions.account.account_data import delete_redis_keys
from functions.account.account_prefabs import prefab_account_blacklist

from elements.inline.inline_profile import finish_registration_btns
from elements.keyboards.keyboards_utilits import form_cancel_kb
from elements.keyboards.keyboards_profile import recreate_profile_kb

from elements.keyboards.text_on_kb import auth_profile
from elements.answers import server_error, no_state

from events.states_group import Authorizationrofile

router = Router()


# --- –ü–∞–Ω–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è -> –ª–æ–≥–∏–Ω ---
@router.message(F.text == auth_profile)
async def create_profile_btn(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await message.answer(
        text="<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üíï!</b>\
        \n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...",
        reply_markup=form_cancel_kb()
    )
    await message.answer(
        text=f"@{message.from_user.username}, –ø—Ä–∏–¥—É–º–∞–π –ª–æ–≥–∏–Ω –¥–æ <b>40-–∞</b> —Å–∏–º–≤–æ–ª–æ–≤:"
    )
    await state.set_state(Authorizationrofile.authorization_login)


# --- –°—Ç–∞–¥–∏—è 1. –õ–æ–≥–∏–Ω -> –ø–∞—Ä–æ–ª—å --- #
@router.message(Authorizationrofile.authorization_login)
async def authorization_login(message: Message, state: FSMContext):
    data = await state.get_data()

    cleaned_text = re.sub(r'[<>]', '', message.text[:30]) # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    data['login'] = cleaned_text
    await state.update_data(data)

    # :TODO: –î–ª–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–æ–ª—è
    await message.answer(
        text=f"<b>–ó–∞–ø–æ–º–Ω–∏–ª - <code>{cleaned_text}</code> ‚ú®!</b>\
        \n–¢–µ–ø–µ—Ä—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å:",
    )
    await state.set_state(Authorizationrofile.authorization_password)


# --- –°—Ç–∞–¥–∏—è 2. –ü–∞—Ä–æ–ª—å -> —Ñ–∏–Ω–∏—à --- #
@router.message(Authorizationrofile.authorization_password)
async def authorization_password(message: Message, state: FSMContext):
    data = await state.get_data()

    cleaned_text = re.sub(r'[<>]', '', message.text[:50]) # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    data['password'] = cleaned_text
    await state.update_data(data)



# --- –°—Ç–∞–¥–∏—è 4. –§–∏–Ω–∞–ª --- #
@router.callback_query(F.data == "finish_registration")
async def finish_registration(callback: CallbackQuery, state: FSMContext):# -
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è
    await remove_button(msg=callback.message, state=state)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ (contacts)
    if not data.get('contacts', ''):
        await state.clear()
        return await callback.message.answer(text=no_state)

    get_user_response = await check_account(config=callback.bot.config, user_id=callback.from_user.id)
    # * .json() -> [{'user_info'}: ..., {'user_statistic'}: ..., {'user_privileges'}: ..., {'blacklist_info'}: ...]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∞–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    ban_status = await prefab_account_blacklist(
        msg=callback.message,
        user_id=callback.from_user.id,
        state=state,
        get_user_response=get_user_response
    )
    # * [server_response, None or message]
    # * server_response.json() -> {'user_info'}: ..., {'user_statistic'}: ..., {'user_privileges'}: ..., {'blacklist_info'}: ...

    # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∞–± –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—É–ª (–ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç)
    if ban_status[1] is None:
        await callback.message.answer(
            text=f"üï† –°–µ–∫—É–Ω–¥–æ—á–∫—É...", 
            reply_markup=ReplyKeyboardRemove()
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        async with httpx.AsyncClient() as client:
            create_user_response = await client.post(callback.bot.config["SETTINGS"]["backend_url"] + 'create_user', json={
                'user_id': callback.from_user.id,
                'login': data.get('login', ''),
                'password': data.get('password', None),
                'contacts': data.get('contacts', '')
            })

        if create_user_response.status_code == 200:
            await state.clear()

            # :TODO: –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞
            await callback.message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")

            await delete_redis_keys(msg=callback.message, user_id=callback.from_user.id)
        else:
            await callback.message.answer(text=server_error)
