import httpx
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from functions.inline_remove import remove_button
from functions.account.account_data import delete_redis_keys
from functions.account.account_prefabs import prefab_account_blacklist

from decorators.profile_decorator import check_authorized

from elements.keyboards.keyboards_profile import recreate_profile_kb, profile_kb

from elements.keyboards.text_on_kb import my_questions
from elements.answers import server_error, no_state

router = Router()


# --- –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ---
@router.message(F.text == my_questions)
@check_authorized
async def my_question_btn(message: Message, state: FSMContext, get_user_response: dict):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É
    async with httpx.AsyncClient() as client:
        all_user_questions_response = await client.get(
            f"{message.bot.config['SETTINGS']['backend_url']}get_all_user_questions?login={get_user_response['login']}"
        )
    
    if all_user_questions_response.status_code == 200:
        if all_user_questions_response.json():
            
        else:
            # :TODO: –°–¥–µ–ª–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            await message.answer(text="<b>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ üßê!</b>\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:")
    else:
        await message.answer(text=server_error)