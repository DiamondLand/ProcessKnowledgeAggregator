import re

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from decorators.profile_decorator import check_authorized, anti_robot_check

from functions.views_logic.looped_tape import send_searching_questions

from elements.keyboards.keyboards_searching import my_questions_kb, all_questions_kb
from elements.keyboards.keyboards_questions import tags_to_question_kb
from elements.keyboards.keyboards_profile import profile_kb
from elements.keyboards.text_on_kb import (next_my_question, next_question, view_answers_my_question, view_answers_question, tag_searching,
                                           answer_my_question, answer_question, edit_my_question, vote_question, back_to_my_questions, back_to_global_questions,
                                           subscribe_my_question, subscribe_question)

from elements.answers import no_state

from events.states_group import Searching, EditQuestionOrAnswer

router = Router()


# --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–µ–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ --- #
@router.message(
    Searching.tape_questions,
    (F.text == next_my_question) | (F.text == next_question) |
    (F.text == view_answers_my_question) | (F.text == view_answers_question) |
    (F.text == answer_my_question) | (F.text == answer_question) |
    (F.text == edit_my_question) | (F.text == vote_question) |
    (F.text == subscribe_my_question) | (F.text == subscribe_question)
)
@anti_robot_check
@check_authorized
async def questions_searching(message: Message, state: FSMContext, my_response: dict):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None and current_state != Searching.tape_questions:
        await state.clear()

    actions = {
        'view_answers': message.text in [view_answers_my_question, view_answers_question],
        'edit': message.text in [edit_my_question],
        'vote': message.text in [vote_question],
        'create_answer': message.text in [answer_my_question, answer_question],
        'subscribe': message.text in [subscribe_my_question, subscribe_question],
        'global_tape': message.text in [
            next_question, view_answers_question, 
            answer_question, vote_question, subscribe_question
        ]
    }

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await send_searching_questions(
        message=message,
        state=state,
        my_response=my_response,
        **actions
    )


# --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–≥–∞  --- #
@router.message( F.text == tag_searching)
async def tag_searching_func(message: Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=await tags_to_question_kb(config=message.bot.config)
    )
    await state.set_state(Searching.tape_tag_questions_write)


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å—É --- #
@router.message(Searching.tape_tag_questions_write)
@check_authorized
async def questions_tag_write(message: Message, state: FSMContext, my_response: dict):
    data = await state.get_data()

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 100:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    data["tag"] = cleaned_text
    await state.update_data(data)

    await state.set_state(Searching.tape_tag_questions)
    
    # –û—Ç–ø—Ä–∞–≤—è–ª–µ–º —ç–º–æ–¥–∑–∏ –∏ –∑–∞–¥–∞—ë–º keyboard
    await message.answer(
        text=f"üîé –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –ª–µ–Ω—Ç–∞ –ø–æ —Ç–µ–≥—É <i>{cleaned_text}</i> ‚ú®",
        reply_markup=all_questions_kb()
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã –ø–æ —Ç–µ–≥–∞–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await send_searching_questions(
        message=message,
        state=state,
        my_response=my_response,
        tag=cleaned_text,
        another_key=f"user:{my_response['login']}:tag_queue_index",
        set_index=False
    )


# --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–µ–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–≥–∞–º --- #
@router.message(
    Searching.tape_tag_questions,
    (F.text == next_question) | (F.text == view_answers_question)
    (F.text == answer_question) | (F.text == vote_question) 
)
@anti_robot_check
@check_authorized
async def questions_tag_searching(message: Message, state: FSMContext, my_response: dict):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    actions = {
        'view_answers': message.text in [view_answers_question],
        'vote': message.text in [vote_question],
        'create_answer': message.text in [answer_question]
    }

    await send_searching_questions(
        message=message,
        state=state,
        my_response=my_response,
        tag=data.get("tag", None),
        another_key=f"user:{my_response['login']}:tag_queue_index",
        **actions
    )


# --- –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ --- #
@router.message((F.text == back_to_my_questions) | (F.text == back_to_global_questions))
async def back_to_question_tape_func(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None and\
    current_state != Searching.create_answer and\
    current_state != Searching.tape_answers and\
    current_state != EditQuestionOrAnswer.edit_question:
        await state.clear()

    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    get_user_response_json = data.get('user_response', None)

    # –ó–∞–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    await state.set_state(Searching.tape_questions)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–µ–Ω—Ç—ã
    await message.answer(
        text="üîé‚ú®",
        reply_markup=all_questions_kb() if message.text == back_to_global_questions else my_questions_kb()
    )

    await send_searching_questions(
        message=message,
        state=state,
        my_response=get_user_response_json,
        set_index=False,
        global_tape=message.text == back_to_global_questions
    )
