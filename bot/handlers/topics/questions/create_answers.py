import httpx
import re

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from decorators.profile_decorator import anti_robot_check

from functions.views_logic.looped_tape import send_searching_answers

from elements.keyboards.keyboards_searching import all_answers_kb, my_answers_kb
from elements.keyboards.keyboards_profile import profile_kb

from elements.keyboards.text_on_kb import next_my_answer, next_all_answer, vote_answer, edit_my_answer

from elements.answers import no_state, server_error

from events.states_group import Searching, EditQuestionOrAnswer

router = Router()


# --- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–µ–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å --- #
@router.message(
    Searching.tape_answers,
    (F.text == next_my_answer) | (F.text == next_all_answer) | (F.text == vote_answer) | (F.text == edit_my_answer)
)
@anti_robot_check
async def profile_searching(message: Message, state: FSMContext):
    data = await state.get_data()

    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())
    
    my_response = data.get('user_response', None)
    global_tape = data.get('global_tape', True)
    question_id = data.get('question_id', None)
    
    actions = {
        'vote': message.text in [vote_answer],
        'edit': message.text in [edit_my_answer],
        'global_tape': global_tape
    }

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await send_searching_answers(
        message=message,
        state=state,
        question_id=question_id,
        my_response=my_response,
        **actions
    )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å—É --- #
@router.message(Searching.create_answer)
async def create_answer(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None and current_state != Searching.create_answer:
        await state.clear()

    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    cleaned_text = re.sub(r'[<>]', '', message.text)  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 1000:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1.000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    question_id = data.get('question_id', None)
    global_tape = data.get('global_tape', True)
    get_user_response_json = data.get('user_response', None)

    async with httpx.AsyncClient() as client:
        create_answer_response = await client.post(message.bot.config['SETTINGS']['backend_url'] + 'create_answer', json={
            "login": get_user_response_json['login'],
            "question_id": question_id,
            "answer": cleaned_text
        })

    if create_answer_response.status_code == 200:
        # –ó–∞–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        await state.set_state(Searching.tape_answers)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–µ–Ω—Ç—ã
        await message.answer(
            text="üíö –û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
            reply_markup=all_answers_kb() if global_tape else my_answers_kb()
        )

        await send_searching_answers(
            message=message,
            state=state,
            question_id=question_id,
            my_response=get_user_response_json,
            global_tape=global_tape
        )
    else:
        await message.answer(text=server_error)


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ ===


# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ -> —Ñ–∏–Ω–∏—à --- #
@router.message(EditQuestionOrAnswer.edit_answer)
async def edit_answer_choice(message: Message, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 1000:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1.000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    my_response = data.get('user_response', None)
    answer_id = data.get("answer_id", 1)
    async with httpx.AsyncClient() as client:
        update_answer_response = await client.put(message.bot.config['SETTINGS']['backend_url'] + 'update_answer', json={
            "answer_id": answer_id,
            "login": my_response['login'],
            "answer": cleaned_text,
        })

    if update_answer_response.status_code == 200:
        await state.set_state(Searching.tape_answers)

        await message.answer(
            text="üíö –û—Ç–≤–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=my_answers_kb()
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–µ–Ω—Ç—ã –ø–æ —Ç–µ–≥–∞–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await send_searching_answers(
            message=message,
            state=state,
            question_id=data.get("question_id", 1),
            my_response=my_response,
            global_tape=False
        )
    else:
        await message.answer(text=server_error)
