import httpx
import re

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from decorators.profile_decorator import check_authorized

from elements.keyboards.keyboards_profile import profile_kb
from elements.keyboards.text_on_kb import create_question

from elements.keyboards.keyboards_utilits import form_cancel_kb
from elements.keyboards.keyboards_questions import tags_to_question_kb

from elements.answers import no_state, server_error

from events.states_group import CreateQuestion

router = Router()


# --- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å --- #
@router.message(F.text == create_question)
async def create_question_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    await state.set_state(CreateQuestion.create_question)

    await message.answer(
        text=f"–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å? –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç:",
        reply_markup=form_cancel_kb()
    )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ -> –≤—ã–±–æ—Ä —Ç–µ–≥–∞ --- #
@router.message(CreateQuestion.create_question)
async def create_question_choice(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None and current_state != CreateQuestion.create_question:
        await state.clear()

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 1000:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1.000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    data = await state.get_data()
    data['question'] = cleaned_text
    await state.update_data(data)

    await state.set_state(CreateQuestion.create_question_tag)

    await message.answer(
        text=f"–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=await tags_to_question_kb(config=message.bot.config)
    )


# --- –í—ã–±–æ—Ä —Ç–µ–≥–∞ -> —Ñ–∏–Ω–∏—â --- #
@router.message(CreateQuestion.create_question_tag)
@check_authorized
async def create_question_tag_choice(message: Message, state: FSMContext, get_user_response: dict):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 1000:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1.000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    async with httpx.AsyncClient() as client:
        create_answer_response = await client.post(message.bot.config['SETTINGS']['backend_url'] + 'create_question', json={
            "login": get_user_response['login'],
            "question": data.get('question', None),
            "tag": cleaned_text
        })

    if create_answer_response.status_code == 200:
        await state.clear()

        await message.answer(
            text="üíõ –í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω! –ü–æ–¥–æ–∂–¥—ë–º –æ—Ç–≤–µ—Ç–æ–≤!",
            reply_markup=profile_kb()
        )
    else:
        await message.answer(text=server_error)