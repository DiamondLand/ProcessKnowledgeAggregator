import httpx
import random
import string
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from decorators.profile_decorator import check_authorized

from functions.views_logic.looped_tape import send_searching_questions
from functions.inline_remove import remove_button

from elements.keyboards.keyboards_searching import my_questions_kb
from elements.keyboards.keyboards_profile import profile_kb
from elements.keyboards.text_on_kb import create_question

from elements.inline.inline_profile import finish_questions_btns
from elements.keyboards.keyboards_utilits import form_cancel_kb
from elements.keyboards.keyboards_questions import tags_to_question_kb

from elements.answers import no_state, server_error

from events.states_group import CreateQuestion, EditQuestionOrAnswer, Searching

router = Router()


# --- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å --- #
@router.message(F.text == create_question)
async def create_question_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    await state.set_state(CreateQuestion.create_question)

    await message.answer(
        text=f"–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å? –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç:",
        reply_markup=form_cancel_kb()
    )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ -> –≤—ã–±–æ—Ä —Ç–µ–≥–∞ --- #
@router.message(CreateQuestion.create_question)
async def create_question_choice(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None and current_state != CreateQuestion.create_question:
        await state.clear()

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 1000:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1.000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    data = await state.get_data()
    data['question'] = cleaned_text
    await state.update_data(data)

    await state.set_state(CreateQuestion.create_question_tag)

    await message.answer(
        text=f"–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=await tags_to_question_kb(config=message.bot.config)
    )


# --- –í—ã–±–æ—Ä —Ç–µ–≥–∞ -> —Ñ–∏–Ω–∏—à --- #
@router.message(CreateQuestion.create_question_tag)
@check_authorized
async def create_question_tag_choice(message: Message, state: FSMContext, get_user_response: dict):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 100:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    async with httpx.AsyncClient() as client:
        create_answer_response = await client.post(message.bot.config['SETTINGS']['backend_url'] + 'create_question', json={
            "login": get_user_response['login'],
            "question": data.get('question', None),
            "tag": cleaned_text
        })

    if create_answer_response.status_code == 200:
        await state.set_state(CreateQuestion.create_question_photo)

        data['question_id'] = create_answer_response.json()['id']
        data['user_response'] = get_user_response
        await state.update_data(data)

        await message.answer(
            text="üïê –°–µ–∫—É–Ω–¥–æ—á–∫—É...",
            reply_markup=form_cancel_kb()
        )
        await message.answer(
            text="üíõ –í–æ–ø—Ä–æ—Å –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –Ω–µ–º—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ –Ω–µ—ë:",
            reply_markup=finish_questions_btns().as_markup()
        )
    else:
        await message.answer(text=server_error)


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å—É --- #
@router.message(CreateQuestion.create_question_photo)
async def create_question_photo(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None and current_state != CreateQuestion.create_question_photo:
        await state.clear()

    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    if message.photo:
        question_id = data.get('question_id', None)
        get_user_response_json = data.get('user_response', None)

        letters = string.ascii_letters + string.digits

        file_path = f"bot/assets/questions/{question_id}_{get_user_response_json['login']}_{''.join(random.choice(letters) for _ in range(7))}.png"
        await message.bot.download(
            message.photo[-1],
            destination=file_path
        )

        await message.answer(
            text="üíõ –í–æ–ø—Ä–æ—Å –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–¥–ª—è –∑–∞–º–µ–Ω—ã) –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å!",
            reply_markup=finish_questions_btns().as_markup()
        )
    else:
        await message.answer(text="‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–ø–æ–ª–µ–Ω–∏–µ!")


# --- –§–∏–Ω–∞–ª --- #
@router.callback_query(F.data == "finish_questions")
async def finish_questions(callback: CallbackQuery, state: FSMContext):# -
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è
    await remove_button(msg=callback.message, state=state)

    if not data:
        await state.clear()
        return await callback.message.answer(text=no_state)
    
    await state.clear()

    await callback.message.answer(
        text="üíõ –í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ—à–µ–Ω–∏–∏. –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!",
        reply_markup=profile_kb()
    )


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ===


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ -> –≤—ã–±–æ—Ä —Ç–µ–≥–∞ --- #
@router.message(EditQuestionOrAnswer.edit_question)
async def edit_question_choice(message: Message, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è

    if len(cleaned_text) < 4 or len(cleaned_text) > 1000:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1.000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    data['new_question'] = cleaned_text
    await state.update_data(data)
    
    await message.answer(
        text=f"–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É –≤–æ–ø—Ä–æ—Å–∞? –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",
        reply_markup=await tags_to_question_kb(config=message.bot.config)
    )

    await state.set_state(EditQuestionOrAnswer.edit_question_tag)


# --- –í—ã–±–æ—Ä —Ç–µ–≥–∞ -> —Ñ–∏–Ω–∏—à --- #
@router.message(EditQuestionOrAnswer.edit_question_tag)
async def edit_question_tag_choice(message: Message, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=profile_kb())

    cleaned_text = re.sub(r'[<>]', '', message.text.capitalize())  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    if len(cleaned_text) < 4 or len(cleaned_text) > 100:
        return await message.answer(text="‚ùå –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 4 –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

    my_response = data.get('user_response', None)

    async with httpx.AsyncClient() as client:
        update_question_response = await client.put(message.bot.config['SETTINGS']['backend_url'] + 'update_question', json={
            "question_id": data.get("question_id", 1),
            "login": my_response['login'],
            "question": data.get('new_question', None),
            "tag": cleaned_text
        })

    if update_question_response.status_code == 200:
        await state.set_state(Searching.tape_questions)

        await message.answer(
            text="üíõ –í–æ–ø—Ä–æ—Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
            reply_markup=my_questions_kb()
        )

        await send_searching_questions(
            message=message,
            state=state,
            my_response = my_response,
            set_index=False,
            global_tape=False
        )
    else:
        await message.answer(text=server_error)
