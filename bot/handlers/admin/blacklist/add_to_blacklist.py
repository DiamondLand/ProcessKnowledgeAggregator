import httpx
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from elements.inline.inline_admin import admins_btns
from elements.answers import server_error, no_state

from events.states_group import AddRemoveBlacklist

router = Router()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–∫–æ–∫ -> –í–≤–æ–¥ Id --- #
@router.callback_query(F.data == "add_to_blacklist")
async def add_to_blacklist(callback: CallbackQuery, state: FSMContext):
    await callback.answer(text="–í—ã –≤–Ω–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.", show_alert=True)
    await callback.message.answer(
        text="‚ú®üí¨",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await state.clear()

    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
    await state.set_state(AddRemoveBlacklist.blacklist_login_to_add)


# --- –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–∫–æ–∫ -> –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ --- #
@router.message(AddRemoveBlacklist.blacklist_login_to_add)
async def blacklist_login_to_add(message: Message, state: FSMContext):
    data = await state.get_data()

    cleaned_text = re.sub(r'[<>]', '', message.text[:300]) # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
        
    data['login_to_blacklist'] = cleaned_text
    await state.update_data(data)

    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
    await state.set_state(AddRemoveBlacklist.blacklist_reason)


# --- –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ -> –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ñ–∏–Ω–∏—à --- #
@router.message(AddRemoveBlacklist.blacklist_reason)
async def blacklist_reason(message: Message, state: FSMContext):
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not data:
        await state.clear()
        return await message.answer(text=no_state, reply_markup=admins_btns().as_markup())
    
    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è
    cleaned_text = re.sub(r'[<>]', '', message.text[:300])
    login_to_blacklist = data.get('login_to_blacklist', None)

    async with httpx.AsyncClient() as client:
        input_to_blacklist_response = await client.post(
            message.bot.config["SETTINGS"]["backend_url"] + 'add_to_blacklist', json={
                'login': login_to_blacklist,
                'reason': cleaned_text
            }
        )

    if input_to_blacklist_response.status_code != 200:
        return await message.answer(text=server_error)

    await state.clear()
    await message.answer(
        text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{login_to_blacklist}</code> –∑–∞–Ω–µ—Å—ë–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!",
        reply_markup=admins_btns().as_markup()
    )
