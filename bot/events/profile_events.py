import httpx

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from elements.keyboards.keyboards_profile import profile_kb
from elements.keyboards.text_on_kb import cancel_button, back, leaders

from handlers.commands.commands_handler import cmd_start

from .states_group import Captcha

router = Router()


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã --- #
@router.message(F.text == cancel_button)
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == Captcha.captcha_input:
        return await message.answer(text="‚ùå –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –ø—Ä–µ—Ä–≤–∞—Ç—å!")

    if current_state is None:
        return await message.answer(
            text="–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å!",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.clear()
    await message.answer(
        text="<b>–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ!</b>\n–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /profile!",
        reply_markup=ReplyKeyboardRemove()
    )


# --- –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞–≤ --- #
@router.message(F.text == back)
async def back_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    await cmd_start(message=message, state=state)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞–ø—Ç—á–∏ --- #
@router.message(Captcha.captcha_input)
async def check_captcha(message: Message, state: FSMContext):
    data = await state.get_data()
    captcha_text = data.get('captcha_text', '')
    if message.text == captcha_text:
        await state.clear()
        await message.answer(
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–±–æ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∏–º üòâ?",
            reply_markup=profile_kb()
        )
    else:
        await message.answer(
            text=f"‚ùå –ù–µ –≤–µ—Ä–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥: <strike><b>{captcha_text}</b></strike>",
            reply_markup=ReplyKeyboardRemove()
        )


# --- –ü–∞–Ω–µ–ª—å –ª–∏–¥–µ—Ä–æ–≤ --- #
@router.message(F.text == leaders)
async def leaders_handler(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    async with httpx.AsyncClient() as client:
        get_users_response = await client.get(
            f"{message.bot.config['SETTINGS']['backend_url']}get_users"
        )
    # * .json() -> [{'user_info'}: ..., {'user_subsribes'}: ..., {'user_statistic'}: ..., {'user_privileges'}: ..., {'blacklist_info'}: ...]

    if get_users_response.status_code == 200 and get_users_response.json():
        text = "–õ–ò–î–ï–†–´:\n\n"

        for user_data in get_users_response.json():
            user_info = user_data.get('user_info', {})
            user_statistics = user_data.get('user_statistic', None)

            if user_statistics:
                for user_statistic in user_statistics:
                    login_id = user_statistic.get('login_id', '')
                    answers = user_statistic.get('answers', 0)
                    questions = user_statistic.get('questions', 0)
                    points = user_statistic.get('points', 0)

                    contacts = user_info.get('contacts', '')

                    user_info_str = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{login_id}</code>."
                    if contacts:
                        user_info_str += f" <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> <code>{contacts}</code>\n"
                    user_info_str += f"–û—Ç–≤–µ—Ç–æ–≤: <code>{answers}</code> | –í–æ–ø—Ä–æ—Å–æ–≤: <code>{questions}</code> | –ü–æ–∏–Ω—Ç–æ–≤: <code>{points}</code>\n\n"

                    text += user_info_str
            else:
                text += "–î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

        await message.answer(text=text)
