import httpx

from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from functions.send_question import send_question_card

from elements.keyboards.keyboards_profile import profile_kb
from elements.keyboards.keyboards_questions import back_to_global_questions_kb, back_to_my_questions_kb

from elements.answers import server_error

from events.states_group import Searching, EditQuestionOrAnswer

from .queue import change_queue_index, get_last_user_id


# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ --- #
async def send_searching_questrions(message: Message, state: FSMContext, my_response, set_index: bool = True, view_answers: bool = False,
                                    edit_question: bool = False, create_answer: bool = False, global_tape: bool = True):
    async with httpx.AsyncClient() as client:
        if global_tape:
            questions_response = await client.get(
                f"{message.bot.config['SETTINGS']['backend_url']}get_all_questions"
            )
        else:
            questions_response = await client.get(
                f"{message.bot.config['SETTINGS']['backend_url']}get_all_user_questions?login={my_response['login']}"
            )

    if questions_response.status_code == 200:
        questions_data = questions_response.json()

        if questions_data:
            my_queue_index_key = f"user:{message.from_user.id}:my_queue_index"
            queue_index_key = f"user:{message.from_user.id}:queue_index"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            get_index = await change_queue_index(
                message=message,
                queue=len(questions_data),
                key=queue_index_key if global_tape else my_queue_index_key,
                set_index=False if create_answer or edit_question else set_index  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–∏—á—Ç—å last_id
            )

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –∏ –æ–±–Ω–æ–≤—è–ª–µ–º
            last_question_id = await get_last_user_id(
                message=message,
                key=queue_index_key if global_tape else my_queue_index_key,
                last_id=questions_data[get_index]['id']
            )

            if view_answers is True:
                await state.set_state(Searching.view_answers)

                data = await state.get_data()
                data['question_id'] = last_question_id
                data['user_response'] = my_response
                await state.update_data(data)

                return await message.answer(
                    text=f"–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å: <i>{questions_data[get_index]['question']}</i>:",
                    reply_markup=back_to_global_questions_kb()
                )
            
            # :TODO: –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
            if create_answer is True:
                await state.set_state(Searching.create_answer)

                data = await state.get_data()
                data['question_id'] = last_question_id
                data['user_response'] = my_response
                await state.update_data(data)

                return await message.answer(
                    text="–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
                    reply_markup=back_to_global_questions_kb()
                )

            # :TODO: –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
            if edit_question is True:
                await state.set_state(EditQuestionOrAnswer.edit_question)

                data = await state.get_data()
                data['question_id'] = last_question_id
                data['user_response'] = my_response
                await state.update_data(data)

                return await message.answer(
                    text="–ò–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞:",
                    reply_markup=back_to_my_questions_kb()
                )

            await send_question_card(
                msg=message,
                questions_data=questions_data[get_index]
            )
        else:
            await message.answer(text="<b>–ó–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç üòâ!</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π.", reply_markup=profile_kb())
    else:
        await message.answer(text=server_error, reply_markup=profile_kb())
