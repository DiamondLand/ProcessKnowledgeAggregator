from aiogram.types import Message, FSInputFile

from functions.find_photo import find_photo_in_folder


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—Ç—á–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ ---
async def send_question_card(msg: Message, questions_data: dict):
    photo_path = find_photo_in_folder(folder_path="bot/assets/questions", id=questions_data['id'])

    if photo_path:
        return await msg.answer_photo(
            photo=FSInputFile(path=photo_path),
            caption=f"\
                <b>üè∑ –¢–µ–≥:</b> <code>{questions_data['tag']}</code> | <b>üéâ –ì–æ–ª–æ—Å–æ–≤:</b> <code>{questions_data['votes']}</code> | <b>üòé –ê–≤—Ç–æ—Ä:</b> <code>{questions_data['login_id']}</code>\
                \n\n‚Äî {questions_data['question']}\
                \n\n<i>* {'–í–æ–ø—Ä–æ—Å –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é!' if questions_data['status'] is False else '–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∏–Ω—Ç—ã!'}</i>"
        )
    else:
        return await msg.answer(
            text=f"\
                <b>üè∑ –¢–µ–≥:</b> <code>{questions_data['tag']}</code> | <b>üéâ –ì–æ–ª–æ—Å–æ–≤:</b> <code>{questions_data['votes']}</code> | <b>üòé –ê–≤—Ç–æ—Ä:</b> <code>{questions_data['login_id']}</code>\
                \n\n‚Äî {questions_data['question']}\
                \n\n<i>* {'–í–æ–ø—Ä–æ—Å –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é!' if questions_data['status'] is False else '–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∏–Ω—Ç—ã!'}</i>"
        )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—Ç—á–∫–∏ –æ—Ç–≤–µ—Ç–∞ ---
async def send_answer_card(msg: Message, answers_data: dict, question: str = None):
    photo_path = find_photo_in_folder(folder_path="bot/assets/answers", id=answers_data['id'])

    if photo_path:
        return await msg.answer_photo(
            photo=FSInputFile(path=photo_path),
            caption=f"\
                <b>üíõ –í–æ–ø—Ä–æ—Å:</b> <code>{question}</code> | <b>üéâ –ì–æ–ª–æ—Å–æ–≤:</b> <code>{answers_data['votes']}</code> | <b>üòé –û—Ç–≤–µ—Ç–∏–ª:</b> <code>{answers_data['login_id']['login']}</code>\
                \n\n‚Äî {answers_data['answer']}\
                \n\n<i>* {'–û—Ç–≤–µ—Ç –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é!' if answers_data['status'] is False else '–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∏–Ω—Ç—ã!'}</i>"
        )
    else:
        return await msg.answer(
            text=f"\
                <b>üíõ –í–æ–ø—Ä–æ—Å:</b> <code>{question}</code> | <b>üéâ –ì–æ–ª–æ—Å–æ–≤:</b> <code>{answers_data['votes']}</code> | <b>üòé –û—Ç–≤–µ—Ç–∏–ª:</b> <code>{answers_data['login_id']['login']}</code>\
                \n\n‚Äî {answers_data['answer']}\
                \n\n<i>* {'–û—Ç–≤–µ—Ç –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é!' if answers_data['status'] is False else '–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∏–Ω—Ç—ã!'}</i>"
        )
